let n = 65535;
let step = 1;
let max = 100;
let min = 0;
let data = {};

const round_to_precision = (x, precision) => {
    var y = +x + (precision === undefined ? 0.5 : precision / 2);
    return y - (y % (precision === undefined ? 1 : +precision));
}
const randn_bm = (min, max, skew) => {
    var u = 0, v = 0;
    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)
    while (v === 0) v = Math.random();
    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);

    num = num / 10.0 + 0.5; // Translate to 0 -> 1
    if (num > 1 || num < 0) num = randn_bm(min, max, skew); // resample between 0 and 1 if out of range
    num = Math.pow(num, skew); // Skew
    num *= max - min; // Stretch to fill range
    num += min; // offset to min
    return num;
}


export const getRandomNumbers = () => {
    for (let j = min; j < max; j += step) {
        data[j] = 0;
    }

    // Create n samples between min and max
    for (let i = 0; i < n; i += step) {
        let rand_num = randn_bm(min, max, 1);
        let rounded = round_to_precision(rand_num, step)
        data[rounded] += 1;
    }

    // Count number of samples at each increment
    let hc_data = [];
    for (const [key, val] of Object.entries(data)) {        
        hc_data.push({ key, values: val })        
    }
    // hc_data.push({ key :1, values: [1,500] });

    // Sort
    hc_data = hc_data.sort(function (a, b) {
        if (a.x < b.x) return -1;
        if (a.x > b.x) return 1;
        return 0;
    });
    let resss = {};
    for (const [key, val] of Object.entries(hc_data)) {        
        resss[key] = val.values
        // hc_data.push({ "label": parseFloat(key), "value": val / n });
    }

    return resss
}

export const ImageStatisticsMock = () => {
    return [
        {
            desc: 'Minimum',
            input: -1844.60,
            scaled: -2.677,
            stretched: -2.677
        },
        {
            desc: 'Maximum',
            input: 4740.37,
            scaled: 2.80,
            stretched: 2.80,
        },
        {
            desc: 'Mean Value',
            input: -1.38,
            scaled: 1.71,
            stretched: 1.71,
        },
        {
            desc: 'Median',
            input: 0.85,
            scaled: 1.82,
            stretched: 1.82,
        },
        {
            desc: 'Standard Deviation',
            input: 23.27,
            scaled: 0.65,
            stretched: 0.65,
        }
    ]
}
export const histogramDataMock = () => {

    return [       
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            2,
            2,
            6,
            5,
            11,
            8,
            22,
            34,
            38,
            95,
            102,
            261,
            423,
            753,
            1628,
            3541,
            11285,
            254067,
            6891136,
            320715,
            40912,
            13510,
            6179,
            3300,
            1901,
            1307,
            883,
            602,
            492,
            367,
            302,
            262,
            185,
            168,
            156,
            123,
            114,
            85,
            72,
            79,
            62,
            55,
            55,
            34,
            58,
            41,
            34,
            33,
            33,
            38,
            27,
            25,
            28,
            25,
            16,
            17,
            21,
            19,
            11,
            9,
            12,
            20,
            13,
            11,
            17,
            15,
            14,
            10,
            3,
            5,
            3,
            20,
            7,
            10,
            8,
            7,
            7,
            6,
            6,
            8,
            2,
            7,
            8,
            5,
            3,
            1,
            1,
            7,
            6,
            6,
            2,
            9,
            1,
            2,
            3,
            3,
            2,
            8,
            3,
            3,
            5,
            1,
            2,
            4,
            2,
            3,
            1,
            3,
            3,
            4,
            3,
            1,
            4,
            1,
            2,
            2,
            1,
            1,
            2,
            6,
            4,
            4,
            2,
            1,
            1,
            3,
            0,
            1,
            1,
            3,
            0,
            4,
            7,
            4,
            3,
            0,
            0,
            0,
            1,
            2,
            1,
            0,
            3,
            1,
            3,
            1,
            2,
            0,
            2,
            2,
            0,
            0,
            2,
            2,
            0,
            0,
            0,
            0,
            2,
            1,
            1,
            1,
            0,
            0,
            0,
            2,
            2,
            0,
            0,
            0,
            2,
            0,
            1,
            2,
            1,
            1,
            1,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
            ]
}